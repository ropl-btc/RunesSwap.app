name: Release from Changelog

on:
  push:
    branches: [ main ]
    paths:
      - 'CHANGELOG.md'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  changelog_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract latest version and notes
        id: extract
        run: |
          set -euo pipefail
          VERSION_LINE=$(grep -m1 -E '^## \[[0-9]+\.[0-9]+\.[0-9]+\]' CHANGELOG.md || true)
          if [ -z "${VERSION_LINE}" ]; then
            echo "No version section found; skipping."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          VERSION=$(echo "$VERSION_LINE" | sed -E 's/^## \[([0-9]+\.[0-9]+\.[0-9]+)\].*/\1/')
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"

          awk -v v="$VERSION" '
            $0 ~ "^## \\[" v "\\]" {found=1; next}
            found && $0 ~ "^## \\[" { exit }
            found { print }
          ' CHANGELOG.md > RELEASE_NOTES.md

          if [ ! -s RELEASE_NOTES.md ]; then
            echo "No notes captured for $VERSION; skipping."
            echo "skip=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

      - name: Create or update GitHub Release
        if: steps.extract.outputs.skip != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.extract.outputs.version }}
        run: |
          set -euo pipefail
          TAG="v${VERSION}"
          TITLE="RunesSwap.app v${VERSION}"
          # Create or update the release; creating a release will also create the tag at this commit.
          if gh release view "$TAG" >/dev/null 2>&1; then
            gh release edit "$TAG" --title "$TITLE" --latest -F RELEASE_NOTES.md
          else
            gh release create "$TAG" --title "$TITLE" --latest -F RELEASE_NOTES.md --target "${GITHUB_SHA}"
          fi

