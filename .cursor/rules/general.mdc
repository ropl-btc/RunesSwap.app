---
description: 
globs: 
alwaysApply: true
---
# RunesSwap Coding Guide

This file provides instructions for automated coding agents (Codex or Claude) working with the **RunesSwap.app** repository.

## Overview
RunesSwap.app is a Next.js application written in **TypeScript**. It offers a swap and borrowing interface for Bitcoin Runes with a Windows‑98 style theme. The app integrates several external services:

- **Ordiscan** for on‑chain UTXO and Rune data
- **SatsTerminal** for swap execution and PSBT handling
- **Liquidium** for borrowing and loan management
- **Supabase** for storage of rune information and market data
- **CoinGecko** for BTC price data

The main source code lives in `src/` and uses the Next.js App Router.
API routes under `src/app/api` act as a thin backend to proxy and cache requests to the above services. Server data is fetched with React Query, and client state is handled by Zustand. Type definitions are organised under `src/types`.

## AI-Optimized Code Standards

### Type Safety Requirements
- **ALWAYS use TypeScript strict mode** - The codebase uses `exactOptionalPropertyTypes` and `noUncheckedIndexedAccess`
- **Never access arrays directly** - Use `safeArrayFirst()` or `safeArrayAccess()` from `@/utils/typeGuards`
- **Explicit optional types** - Use `| undefined` for exact optional property types, not `?:` alone
- **JWT parsing safety** - Use `safeParseJWT()` from `@/utils/typeGuards` for token handling

### Safe Utility Functions (Always Use These)
```typescript
// From @/utils/typeGuards - MANDATORY for array access
safeArrayFirst<T>(array: T[]): T | undefined
safeArrayAccess<T>(array: T[], index: number): T | undefined  
safeParseJWT(jwt: string): Record<string, unknown> | null
```

### Safe Number Conversion Patterns
When converting strings to numbers, **ALWAYS validate the result** to prevent `NaN` values:

```typescript
// ✅ CORRECT - Safe number conversion with validation
if (typeof value === 'string') {
  const numericValue = Number(value);
  if (!isNaN(numericValue)) {
    // Safe to use numericValue
    object.property = numericValue;
  }
  // If NaN, keep original value or handle appropriately
}

// ❌ AVOID - Unsafe conversion that can produce NaN
object.property = Number(stringValue); // Could be NaN!

// ✅ CORRECT - Alternative with explicit fallback
const safeNumber = (value: string, fallback = 0): number => {
  const num = Number(value);
  return isNaN(num) ? fallback : num;
};
```

**Key Rules:**
- Never assign `Number(string)` directly without validation
- Always check `!isNaN(result)` after conversion
- Consider fallback values or error handling for invalid conversions
- Be especially careful with user input and external API data

### Component Interface Standards
When defining component props, use explicit undefined unions for optional functions:
```typescript
// ✅ CORRECT - AI-friendly
interface Props {
  onCallback: ((value: string) => void) | undefined;
  optionalProp?: string | undefined;
}

// ❌ AVOID - causes exactOptionalPropertyTypes errors  
interface Props {
  onCallback?: (value: string) => void;
  optionalProp?: string;
}
```

### Code Formatting Standards
- **80-character line width** for optimal AI scanning
- **Single quotes** for string literals  
- **Trailing commas** everywhere for clean diffs
- **Import organization** - automatic alphabetical sorting enabled
- Run `pnpm ai-check` before committing to verify AI-friendliness

## Repository Layout
```text
/ (repo root)
├── src/                 # Application source code
│   ├── app/             # Next.js pages and API routes
│   │   ├── api/         # Serverless API endpoints
│   │   ├── docs/        # Renders README.md
│   │   ├── globals.css  # Global styles (Win98 theme)
│   │   └── ...
│   ├── components/      # React components (SwapTab, BorrowTab, etc.)
│   ├── context/         # React context providers
│   ├── hooks/           # Custom React hooks
│   ├── lib/             # API client utilities, data helpers
│   ├── store/           # Zustand stores
│   ├── types/           # Shared TypeScript types
│   └── utils/           # Helper functions (including type safety utilities)
├── liquidium-openapi/   # OpenAPI specs for Liquidium
├── public/              # Static assets and fonts
└── ...                  # Config files and scripts
```
A `.env.example` file shows all environment variables needed for development. Important variables include:
- `SATS_TERMINAL_API_KEY`
- `TBA_API_URL`
- `ORDISCAN_API_KEY`
- `RUNES_FLOOR_API_KEY`
- `LIQUIDIUM_API_KEY` (server-side only)
- `NEXT_PUBLIC_LIQUIDIUM_API_URL`
- `NEXT_PUBLIC_SUPABASE_URL`
- `NEXT_PUBLIC_SUPABASE_ANON_KEY`

**Security Note:** Never use `NEXT_PUBLIC_` prefix for sensitive API keys as it exposes them to the client-side. Use server-side environment variables for authentication tokens.

## Development
Install dependencies and start the development server with **pnpm**:
```bash
pnpm install
pnpm dev
```
The app runs at `http://localhost:3000`.
To build and run in production mode:
```bash
pnpm build
pnpm start
```

## Testing and Linting
- Unit tests use **Jest** with the `ts-jest` preset:
  ```bash
  pnpm test
  ```
- Linting uses **ESLint** and Prettier:
  ```bash
  pnpm lint
  pnpm lint:fix  # Auto-fix imports and formatting
  ```
- **AI verification command:**
  ```bash
  pnpm ai-check  # Runs type-check, lint, and format verification
  ```
The pre‑commit hook runs `lint-staged`, the test suite, and a production build. Commit messages are checked by **commitlint** and must follow the Conventional Commits format.

## Architecture Notes
- Uses **Next.js App Router** for routing.
- API routes wrap external services and return standardised responses via helpers in `src/lib/apiUtils.ts`.
- React components under `src/components` implement the swap, borrow, portfolio and info tabs.
- State is managed with React Query (server data) and Zustand (client state); shared contexts live in `src/context`.
- Path alias `@/*` resolves to `./src/*` (configured in `tsconfig.json` and Jest).
- Styles use CSS Modules plus global variables for the Windows 98 theme.
- The README is rendered through `src/app/docs` for in‑app documentation.

## Data Flows
### Typical
1. A UI component fetches data using React Query.
2. The query calls a helper in `src/lib/apiClient.ts`.
3. The helper requests a Next.js API route under `src/app/api`.
4. The API route calls Ordiscan, SatsTerminal or Liquidium, caching results in Supabase when appropriate.
5. The UI updates based on the React Query result.

### Swap Flow
1. User selects input/output assets and amount.
2. A quote is fetched from SatsTerminal.
3. The user confirms and signs the PSBT with the Laser Eyes wallet.
4. The transaction is broadcast to the Bitcoin network.

### Borrow Flow
1. User chooses a Rune for collateral.
2. User enters amount and loan terms.
3. A quote is fetched from Liquidium.
4. After confirmation and signing, the loan is issued on‑chain.

## Component Guidelines
Break larger components into smaller ones where possible. Stateful logic should live in custom hooks under `src/hooks`. Reusable UI pieces belong in `src/components`.

**Type Safety in Components:**
- Always handle potentially undefined props explicitly
- Use the safe utility functions for array operations
- Prefer explicit error boundaries over uncaught exceptions

## JSDoc Documentation Standards

Document all exported functions, components, and hooks:
```typescript
/**
 * Fetches rune data with caching and error handling
 * @param runeId - The unique identifier for the rune
 * @param options - Optional configuration for the request
 * @returns Promise resolving to rune data or null if not found
 */
export async function fetchRuneData(
  runeId: string, 
  options?: { useCache?: boolean }
): Promise<RuneData | null> {
  // Implementation
}

/**
 * Custom hook for managing swap quote state
 * @param assetIn - Input asset for the swap
 * @param assetOut - Output asset for the swap
 * @returns Object containing quote data, loading state, and error
 */
export function useSwapQuote(assetIn: Asset, assetOut: Asset) {
  // Implementation
}
```

## CSS Guidelines

### Windows 98 Theme Integration
Combine CSS Modules with 98.css classes:
```typescript
// Component.module.css
.container {
  padding: 8px;
  background: var(--surface);
}

.button {
  margin: 4px;
  min-width: 75px;
}

// Component.tsx
import styles from './Component.module.css';

export function Component() {
  return (
    <div className={`${styles.container} window`}>
      <div className="title-bar">
        <div className="title-bar-text">RunesSwap</div>
      </div>
      <button className={`${styles.button} btn`}>
        Click me
      </button>
    </div>
  );
}
```

### CSS Module Naming
- Use **camelCase** for class names
- Be **descriptive** but **concise**
- Group related styles together
- Prefix state-based classes clearly

```css
/* ✅ Good naming */
.swapContainer { /* Main container */ }
.swapButton { /* Action button */ }
.swapButtonDisabled { /* Disabled state */ }
.swapInputError { /* Error state */ }

/* ❌ Avoid */
.container { /* Too generic */ }
.btn1 { /* Non-descriptive */ }
.swap-button { /* Use camelCase, not kebab-case */ }
```

## API Route Patterns
When working with API routes, follow these patterns for maximum AI comprehensibility:

```typescript
// ✅ CORRECT - Safe array access pattern
const { data: tokenRows } = await supabase.from('table').select('*');
const firstToken = safeArrayFirst(tokenRows);
if (!firstToken?.jwt) {
  return createErrorResponse('Error message', 'Details', 401);
}

// ❌ AVOID - Unsafe array access
const userJwt = tokenRows[0].jwt; // Could throw if array is empty
```

## Contributing
When adding features:
1. Create or update API routes in `src/app/api` if needed.
2. Extend API client methods in `src/lib/apiClient.ts`.
3. Implement or update React components and hooks.
4. Add Jest tests for new utilities or routes.
5. **Always use safe utility functions** for array access and null checks.
6. Run `pnpm ai-check` to verify AI-friendliness before committing.
7. Run `pnpm lint`, `pnpm test`, and `pnpm build` before committing.

### Code Review Checklist for AI Agents
- [ ] No direct array access (`array[0]` → use `safeArrayFirst(array)`)
- [ ] Optional props use explicit `| undefined` unions
- [ ] All imports are auto-organized (run `pnpm lint:fix`)
- [ ] Line length stays under 80 characters
- [ ] Type safety utilities are used consistently
- [ ] JSDoc comments added for exported functions/components
- [ ] CSS follows Windows 98 theme integration patterns
- [ ] `pnpm ai-check` passes without errors

Refer to `README.md` for additional details.
