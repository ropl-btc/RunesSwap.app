---
description: 
globs: 
alwaysApply: true
---
# RunesSwap Coding Guide

Concise guidance for automated coding agents (Codex/Claude) working on
RunesSwap.app. Keep edits minimal, type‑safe, and aligned with the patterns
below.

### Overview
- **Framework**: Next.js App Router, React 19, TypeScript (strict).
- **State**: React Query (server data) + Zustand (client state).
- **Theme**: Windows‑98 style via CSS Modules + global CSS variables.
- **Path alias**: `@/*` → `./src/*` (tsconfig + Jest).

### External services
- **Ordiscan**: on‑chain UTXO, rune data.
- **SatsTerminal**: quotes, PSBT, swap execution.
- **Liquidium**: borrowing, loans.
- **Supabase**: rune info + market data cache.
- **CoinGecko**: BTC price.

### Structure
```text
src/
  app/ (api routes, docs page, layout, globals.css)
  components/ (Swap, Borrow, Portfolio, Info tabs, etc.)
  context/ (LaserEyesProvider, backgrounds)
  hooks/ (data + UI logic)
  lib/ (API helpers; service clients under lib/api)
  store/ (Zustand stores)
  types/ (shared TS types)
  utils/ (formatters, guards, runes helpers)
```

### Environment
Set variables from `.env.example`. Commonly required:
- `SATS_TERMINAL_API_KEY`
- `ORDISCAN_API_KEY`
- `RUNES_FLOOR_API_KEY`
- `LIQUIDIUM_API_URL`, `LIQUIDIUM_API_KEY` (server‑side only)
- `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`

Security: never expose secrets via `NEXT_PUBLIC_*`.

### AI‑optimized code standards
- **Type safety (strict)**: `exactOptionalPropertyTypes`,
  `noUncheckedIndexedAccess` are enabled in `tsconfig.json`.
- **Safe utilities** (use these, avoid direct array indexing):
  - `safeArrayFirst<T>(array: T[]): T | undefined`
  - `safeArrayAccess<T>(array: T[], index: number): T | undefined`
  - `safeParseJWT(jwt: string): Record<string, unknown> | null`
  Location: `src/utils/typeGuards.ts`.
- **Numbers**: validate conversions to avoid `NaN`.
  ```ts
  const toNumber = (s: string, fallback = 0) => {
    const n = Number(s);
    return Number.isNaN(n) ? fallback : n;
  };
  ```
- **Component props**: optional callbacks as explicit unions:
  ```ts
  onCallback: ((v: string) => void) | undefined;
  ```
- **Formatting/imports**: 80‑char max; alphabetized, grouped imports
  (ESLint import/order + sort‑imports).

### API patterns
- Use helpers in `src/lib/apiUtils.ts`:
  - `createSuccessResponse`, `createErrorResponse`, `handleApiError`,
    `validateRequest` (Zod‑based validation for body/query).
- Client side API responses: `src/lib/api/utils.ts` → `handleApiResponse<T>()`.
- Prefer thin API routes under `src/app/api/*` that proxy Ordiscan,
  SatsTerminal, Liquidium; cache in Supabase when helpful.

### Numeric precision
Use `big.js` for financial math (quotes, USD conversions, portfolio):
`import Big from 'big.js'`. See `src/hooks/useUsdValues.ts` and
`src/components/FormattedRuneAmount.tsx` for patterns.

### Data flows
- **Typical**: component → `lib/apiClient.ts` (re‑exports from `lib/api`) →
  `app/api/*` → external service → standardized JSON → React Query updates UI.
- **Swap**: select assets/amount → SatsTerminal quote → sign PSBT via
  LaserEyes → broadcast.
- **Borrow**: select rune collateral → Liquidium quote → sign → on‑chain loan.

### CSS guidelines
- Use CSS Modules with global Win98 variables (see `app/globals.css`).
- CamelCase class names; descriptive and concise.

### Dev & quality
- Scripts: `pnpm dev`, `pnpm build`, `pnpm start`, `pnpm test`,
  `pnpm lint`, `pnpm ai-check`, `pnpm gen:liquidium-sdk`.
- Tests: Jest + ts‑jest, `jsdom`, CSS module mapping.
- Commits: Conventional Commits enforced by commitlint; husky prepares hooks.

### Agent checklist
- Use safe array/number patterns; avoid `array[0]`.
- Keep lines ≤ 80 chars; imports sorted/alphabetized.
- Respect server vs client env vars; do not leak secrets.
- For API routes, use the helpers and Zod validation.
- Prefer small, focused hooks/components; keep business logic out of UI.
- Run `pnpm ai-check` locally before proposing a commit.
