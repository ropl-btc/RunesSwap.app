---
description: Key dependency usage patterns, import organization, and package management guidelines for RunesSwap's tech stack
globs: 
alwaysApply: false
---
# Key Dependencies Guide

## Core Dependencies Usage Patterns

### UI Framework & Styling
- **@headlessui/react** - Accessible UI components (modals, dropdowns)
- **@heroicons/react** - SVG icon library
- **CSS Modules** - Component-scoped styling

### Bitcoin & Runes Integration
- **@omnisat/lasereyes** - Bitcoin wallet connection
- **ordiscan** - Ordiscan API SDK for Runes data
- **satsterminal-sdk** - SatsTerminal API for swaps

```typescript
// ✅ Correct usage of ordiscan SDK
import { ordiscan } from 'ordiscan';

const runeData = await ordiscan.runes.getRuneInfo(runeId);
```

### Data Management
- **@tanstack/react-query** - Server state management
- **zustand** - Client state management  
- **@supabase/supabase-js** - Database client

```typescript
// ✅ Correct React Query pattern
import { useQuery } from '@tanstack/react-query';

export function useRuneData(runeId: string) {
  return useQuery({
    queryKey: ['rune', runeId],
    queryFn: () => fetchRuneData(runeId),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
}
```

### Charts & Visualization
- **recharts** - Chart library for price history
- **react-markdown** + **remark-gfm** - Markdown rendering

```typescript
// ✅ Correct recharts usage
import { LineChart, Line, XAxis, YAxis, ResponsiveContainer } from 'recharts';

export function PriceChart({ data }: { data: PricePoint[] }) {
  return (
    <ResponsiveContainer width="100%" height={300}>
      <LineChart data={data}>
        <XAxis dataKey="timestamp" />
        <YAxis />
        <Line type="monotone" dataKey="price" stroke="#008080" />
      </LineChart>
    </ResponsiveContainer>
  );
}
```

### Utilities
- **lodash.debounce** - Input debouncing
- **use-debounce** - React hook for debouncing
- **zod** - Runtime type validation

```typescript
// ✅ Correct debouncing pattern
import { useDebouncedCallback } from 'use-debounce';

export function SearchInput() {
  const debouncedSearch = useDebouncedCallback(
    (term: string) => {
      // Perform search
    },
    300
  );
  
  return <input onChange={(e) => debouncedSearch(e.target.value)} />;
}
```

## Development Dependencies

### Testing & Quality
- **jest** + **ts-jest** - Testing framework
- **@types/jest** - TypeScript support for Jest
- **jsdom** - DOM environment for testing

### Linting & Formatting
- **eslint** + **@typescript-eslint/parser** - Code linting
- **prettier** - Code formatting
- **husky** + **lint-staged** - Git hooks

### TypeScript & Build
- **typescript** - TypeScript compiler
- **next** - Next.js framework
- **@types/**** - Type definitions

## Package Manager

**Always use pnpm** (not npm or yarn):

```bash
# ✅ Correct
pnpm install
pnpm add package-name
pnpm dev

# ❌ Avoid
npm install
yarn add package-name
```

## Import Organization

Imports are automatically organized by ESLint. Standard order:
1. React imports
2. Third-party libraries 
3. Internal imports (using @/* alias)
4. Relative imports
5. Type-only imports

```typescript
// ✅ Correct import order (auto-organized by ESLint)
import React from 'react';
import { useQuery } from '@tanstack/react-query';

import { Button } from '@/components/Button';
import { formatRunes } from '@/utils/formatters';

import styles from './Component.module.css';

import type { RuneData } from '@/types/ordiscan';
```

## Version Management

Check `package.json` for exact versions. Key notes:
- **Next.js 15.2.4** - App Router with latest features
- **React 19** - Latest React with concurrent features
- **TypeScript 5** - Latest TypeScript with strict mode
- **Node.js 18+** - Required for development
