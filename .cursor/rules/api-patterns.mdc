---
description: 
globs: src/lib/api/**/*.ts,src/app/api/**/*.ts,src/lib/apiClient.ts,src/lib/*Server.ts,src/hooks/use*Swap*.ts,src/hooks/use*Borrow*.ts,src/hooks/use*Quote*.ts,src/hooks/use*Liquidium*.ts,src/hooks/useSwap*.ts,src/hooks/useBorrow*.ts,src/hooks/useLiquidium*.ts
alwaysApply: false
---
# API Patterns & Integration Guide

## API Client Architecture

The API client is **distributed across multiple files** in `src/lib/api/`, not centralized in `apiClient.ts`.

### File Structure
```text
src/lib/
├── apiClient.ts          # Barrel export (re-exports from api/)
├── api/
│   ├── index.ts          # Main API client methods
│   ├── ordiscan.ts       # Ordiscan SDK integration
│   ├── satsTerminal.ts   # SatsTerminal SDK integration  
│   ├── liquidium.ts      # Liquidium API integration
│   ├── coingecko.ts      # CoinGecko API integration
│   └── utils.ts          # API utility functions
├── liquidiumServer.ts    # Server-side Liquidium utilities
├── popularRunesCache.ts  # Caching layer for popular runes
└── runeMarketData.ts     # Market data aggregation
```

## API Route Patterns

### Standard Next.js API Route Structure
```typescript
// src/app/api/example/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { createErrorResponse, createSuccessResponse } from '@/lib/api/utils';

export async function GET(request: NextRequest) {
  try {
    // Extract and validate parameters
    const { searchParams } = new URL(request.url);
    const param = searchParams.get('param');
    
    if (!param) {
      return createErrorResponse(
        'Parameter required', 
        'Missing required parameter: param',
        400
      );
    }

    // Call external service
    const data = await externalAPICall(param);
    
    return createSuccessResponse(data);
  } catch (error) {
    return createErrorResponse(
      'Service unavailable',
      `Failed to fetch data: ${error instanceof Error ? error.message : 'Unknown error'}`,
      500
    );
  }
}
```

### API Response Standardization
**CRITICAL**: All API routes must return consistent response formats using helper functions from `@/lib/apiUtils`:

```typescript
// ✅ Correct - Standardized responses
import { createErrorResponse, createSuccessResponse } from '@/lib/apiUtils';

// Success response - ALWAYS use createSuccessResponse
return createSuccessResponse(data);

// Error response with details
return createErrorResponse(
  'User-friendly message',
  'Technical details for debugging', 
  statusCode
);

// ❌ NEVER return raw JSON directly from external APIs
return NextResponse.json(externalApiResponse); // This breaks client expectations!

// ✅ ALWAYS wrap external API responses
const externalResponse = await externalAPI.call();
return createSuccessResponse(externalResponse);
```

### Client-Server API Contract
All API endpoints must maintain consistent response format for proper client handling:

```typescript
// Expected response format for ALL endpoints:
interface StandardResponse<T> {
  success: boolean;
  data: T;
  error?: {
    message: string;
    details: string;
    code?: string;
  };
}

// Client code expects this format and uses handleApiResponse<T>()
const data = await response.json();
return handleApiResponse<ReturnType>(data, true); // true = expect wrapper
```

## External Service Integration Patterns

### Ordiscan Integration
```typescript
// ✅ Use the ordiscan SDK directly
import { ordiscan } from 'ordiscan';

export async function getRuneInfo(runeId: string) {
  try {
    const runeData = await ordiscan.runes.getRuneInfo(runeId);
    return runeData;
  } catch (error) {
    throw new Error(`Failed to fetch rune info: ${error}`);
  }
}
```

### SatsTerminal Integration
```typescript
// ✅ Use satsterminal-sdk - CORRECT PATTERNS
import { 
  SatsTerminal, 
  type QuoteParams, 
  type SearchParams,
  type GetPSBTParams,
  type ConfirmPSBTParams 
} from 'satsterminal-sdk';

const terminal = new SatsTerminal({
  apiKey: process.env.SATS_TERMINAL_API_KEY!,
});

// Search method - uses 'query' not 'rune_name'
export async function searchTokens(query: string) {
  const searchParams: SearchParams = {
    query: query,
    sell: false,
  };
  return await terminal.search(searchParams);
}

// Quote method - uses 'fetchQuote' not 'getQuote'
export async function createSwapQuote(params: QuoteParams) {
  return await terminal.fetchQuote(params);
}

// Popular tokens - uses 'popularTokens' not 'popularCollections'
export async function getPopularTokens() {
  return await terminal.popularTokens({});
}

// PSBT methods
export async function createPSBT(params: GetPSBTParams) {
  return await terminal.getPSBT(params);
}

export async function confirmPSBT(params: ConfirmPSBTParams) {
  return await terminal.confirmPSBT(params);
}

// ⚠️  WARNING: SDK Documentation Reliability
// The npm documentation for satsterminal-sdk may be outdated.
// Always verify against the actual TypeScript definitions in:
// node_modules/satsterminal-sdk/dist/types.d.ts
// 
// Known outdated patterns in npm docs:
// - Uses 'rune_name' instead of 'query' in SearchParams
// - References 'popularCollections' instead of 'popularTokens'  
// - Shows 'RuneOrder' instead of 'Order' interface
// - Contains incorrect method names and signatures
```

### Liquidium Integration (Server-side)
```typescript
// ✅ Use the generated SDK (src/sdk/liquidium) via the helper
import { createLiquidiumClient } from '@/lib/liquidiumSdk';

export async function getBorrowerLoans(userJwt: string | undefined) {
  // Never expose LIQUIDIUM_API_KEY to the browser – the SDK is imported
  // only in backend code (e.g. Next.js Route Handlers).
  const client = createLiquidiumClient(userJwt);
  // New consolidated endpoint – no longer "/borrower/portfolio"
  const portfolio = await client.portfolio.getApiV1Portfolio();
  return portfolio.borrower?.runes?.loans ?? [];
}
```

Key points
• `createLiquidiumClient` injects `Authorization: Bearer ${LIQUIDIUM_API_KEY}` and optional `x-user-token` header.  
• The OpenAPI spec is stored in `liquidium-openapi/` and compiled to TypeScript via `pnpm gen:liquidium-sdk`.  
• Generated SDK files live in `src/sdk/liquidium` and are excluded from linting, formatting, and test transforms.  
• Do **NOT** import the SDK in client-side code; keep Liquidium calls in server routes or server-only helpers.

## Caching Strategies

### Supabase Caching Pattern
```typescript
// ✅ Cache frequently accessed data in Supabase
export async function getCachedRuneData(runeId: string) {
  // Check cache first
  const { data: cached } = await supabase
    .from('rune_cache')
    .select('*')
    .eq('rune_id', runeId)
    .single();

  if (cached && isCacheValid(cached.updated_at)) {
    return cached.data;
  }

  // Fetch fresh data
  const freshData = await ordiscan.runes.getRuneInfo(runeId);
  
  // Update cache
  await supabase
    .from('rune_cache')
    .upsert({
      rune_id: runeId,
      data: freshData,
      updated_at: new Date().toISOString(),
    });

  return freshData;
}
```

### React Query Integration
```typescript
// ✅ Client-side data fetching with React Query
export function useRuneData(runeId: string) {
  return useQuery({
    queryKey: ['rune-data', runeId],
    queryFn: async () => {
      const response = await fetch(`/api/ordiscan/rune-info?id=${runeId}`);
      if (!response.ok) throw new Error('Failed to fetch rune data');
      return response.json();
    },
    staleTime: 5 * 60 * 1000, // 5 minutes
    retry: 3,
  });
}
```

## Environment Variable Validation

```typescript
// ✅ Always validate required environment variables
function validateApiKeys() {
  const required = [
    'SATS_TERMINAL_API_KEY',
    'ORDISCAN_API_KEY', 
    'LIQUIDIUM_API_KEY'
  ];
  
  for (const key of required) {
    if (!process.env[key]) {
      throw new Error(`${key} environment variable is required`);
    }
  }
}
```

## Testing API Routes

```typescript
// ✅ API route testing pattern
import { createMocks } from 'node-mocks-http';
import handler from './route';

describe('/api/example', () => {
  test('handles valid request', async () => {
    const { req, res } = createMocks({
      method: 'GET',
      query: { param: 'value' },
    });

    await handler(req, res);

    expect(res._getStatusCode()).toBe(200);
    const data = JSON.parse(res._getData());
    expect(data.success).toBe(true);
  });
});
```

## Common Anti-patterns

### ❌ Don't Do This
```typescript
// Don't expose sensitive keys to client
const apiKey = process.env.NEXT_PUBLIC_LIQUIDIUM_API_KEY; // Wrong!

// Don't use direct array access
const firstResult = results[0]; // Could throw

// Don't skip error handling
const data = await externalAPI.call(); // Could fail silently

// Don't return raw external API responses  
return NextResponse.json(satsTerminalResponse); // Breaks client contract!

// Don't trust npm documentation for satsterminal-sdk
const searchParams = { rune_name: query }; // Wrong! Should be 'query'
await terminal.popularCollections(); // Wrong! Should be 'popularTokens'
```

### ✅ Do This Instead
```typescript
// Server-side API key usage
const apiKey = process.env.LIQUIDIUM_API_KEY; // Correct

// Safe array access
const firstResult = safeArrayFirst(results); // Type-safe

// Proper error handling with standardized responses
try {
  const data = await externalAPI.call();
  return createSuccessResponse(data); // Always wrap responses!
} catch (error) {
  return createErrorResponse('Failed to fetch', error.message, 500);
}

// Use actual SDK interface (verify in types.d.ts)
const searchParams: SearchParams = { query: query }; // Correct parameter name
await terminal.popularTokens(); // Correct method name
await terminal.fetchQuote(params); // Correct method name
```
